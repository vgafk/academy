schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Faculty
  @join__type(graph: FACULTIES)
{
  id: ID!
  name: String!
}

type Group
  @join__type(graph: FACULTIES, key: "id", extension: true)
  @join__type(graph: STUDENTS, key: "id")
{
  id: ID!
  name: String @join__field(graph: FACULTIES)
  full_name: String @join__field(graph: FACULTIES)
  faculty_id: Int @join__field(graph: FACULTIES)
  faculty: Faculty! @join__field(graph: FACULTIES)
}

scalar join__FieldSet

enum join__Graph {
  FACULTIES @join__graph(name: "faculties", url: "http://127.0.0.1:11802/graphql")
  STUDENTS @join__graph(name: "students", url: "http://127.0.0.1:11801/graphql")
  USERS @join__graph(name: "users", url: "http://127.0.0.1:11800/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: FACULTIES)
{
  upload_file(file: Upload!): String!
}

type Query
  @join__type(graph: FACULTIES)
  @join__type(graph: STUDENTS)
  @join__type(graph: USERS)
{
  groups: [Group!]! @join__field(graph: FACULTIES)
  group(group_id: Int!): Group! @join__field(graph: FACULTIES)
  faculty_groups(faculty_id: Int!): [Group!]! @join__field(graph: FACULTIES)
  faculties: [Faculty!]! @join__field(graph: FACULTIES)
  faculty(faculty_id: Int!): Faculty! @join__field(graph: FACULTIES)
  student(student_id: Int!): SelectStudentResponse! @join__field(graph: STUDENTS)
  students: [Student!]! @join__field(graph: STUDENTS)
  group_students(group_id: Int!): [Student!]! @join__field(graph: STUDENTS)
  users: [User!]! @join__field(graph: USERS)
  user(user_id: Int = null, login: String = null): SelectUserResponse! @join__field(graph: USERS)
}

union SelectStudentResponse
  @join__type(graph: STUDENTS)
 = Student | StudentNotFound

union SelectUserResponse
  @join__type(graph: USERS)
 = User | UserNotFound

type Student
  @join__type(graph: STUDENTS, key: "id")
{
  id: ID!
  user_id: Int!
  surname: String!
  name: String!
  middle_name: String
  snils: String
  inn: String
  email: String
  phone: String
  group_id: Int!
  group: Group!
}

type StudentNotFound
  @join__type(graph: STUDENTS)
{
  error: String!
}

scalar Upload
  @join__type(graph: FACULTIES)

type User
  @join__type(graph: STUDENTS, key: "id", extension: true)
  @join__type(graph: USERS, key: "id")
{
  id: ID!
  student: SelectStudentResponse! @join__field(graph: STUDENTS)
  login: String! @join__field(graph: USERS)
  password: String @join__field(graph: USERS)
}

type UserNotFound
  @join__type(graph: USERS)
{
  error: String!
}